package ginq

func groupBy[Tsource, Tkey, Telement, Tout](
	keySelector func (Tsource) Tkey,
	elementSelector func (Tsource) Telement,
	resultSelector func (Tkey, []Telement) Tout,
	slice []Tsource) []Tout {

	var out []Tout
	groups := make(map[Tkey][]Telement)
	for _, item := range slice {
		key := keySelector(item)
		element := elementSelector(item)
		_, exists := groups[key]
		if exists {
			groups[key] = append(groups[key], element)
		} else {
			groups[key] = []Telement{element}
		}
	}

	for key, element := range groups {
		out = append(out, resultSelector(key, element))
	}

	return out
}