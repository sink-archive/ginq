package ginq

func skip[T](amount int, slice []T) [] T {
	var out [] T
	for i, item := range slice {
		if i < amount {
			continue
		}
		out = append(out, item)
	}

	return out
}

func skipLast[T](amount int, slice []T) [] T {
	var out [] T
	for i, item := range slice {
		if len(slice) - i < amount {
			continue
		}
		out = append(out, item)
	}

	return out
}

func skipWhile[T](check func(T) bool, slice []T) [] T {
	var out [] T
	returnAll := false
	for _, item := range slice {
		if !returnAll && check(item) {
			returnAll = true
			continue
		}
		out = append(out, item)
	}
	return out
}

func take[T](amount int, slice []T) [] T {
	var out [] T
	for i, item := range slice {
		if i > amount {
			continue
		}
		out = append(out, item)
	}

	return out
}


func takeLast[T](amount int, slice []T) [] T {
	var out [] T
	for i, item := range slice {
		if len(slice) - i > amount {
			continue
		}
		out = append(out, item)
	}

	return out
}

func takeWhile[T](check func(T) bool, slice []T) [] T {
	var out [] T
	for _, item := range slice {
		if !check(item) {
			return out
		}
		out = append(out, item)
	}

	return out
}