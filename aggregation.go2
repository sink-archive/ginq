package ginq

import "math"

func average(slice []float64) float64 {
	total := float64(0)
	for _, item := range slice {
		total += item
	}

	return total / float64(count[float64](slice))
}

func count[T](slice []T) int64 {
	var count int64
	for range slice {
		count++
	}
	return count
}

func maxInt(slice []int64) int64 {
	return aggregate[int64](0,
		func (working, next int64) int64 {
			return int64(math.Max(float64(working), float64(next)))
		},
		slice)
}

func maxFloat(slice []float64) float64 {
	return aggregate[float64](0,
		func (working, next float64) float64 {
			return math.Max(working, next)
		},
		slice)
}


func minInt(slice []int64) int64 {
	return aggregate[int64](0,
		func (working, next int64) int64 {
			return int64(math.Min(float64(working), float64(next)))
		},
		slice)
}

func minFloat(slice []float64) float64 {
	return aggregate[float64](0,
		func (working, next float64) float64 {
			return math.Min(working, next)
		},
		slice)
}

func sumInts(slice []int64) int64 {
	return aggregate[int64](0,
		func (working, next int64) int64 {
			return working + next
		},
		slice)

}

func sumFloats(slice []float64) float64 {
	return aggregate[float64](0,
		func (working, next float64) float64 {
			return working + next
		},
		slice)
}

func aggregate[T](base T, operation func (working, next T) T, slice []T) T {
	working := base
	for _, item := range slice {
		working = operation(working, item)
	}

	return working
}